{
  "address": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "updateInterval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "counter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "interval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x85bfa4ea0bd16f1e3a9e202a3203674edd0c2085c4226aa814aadea1b1d26c53",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
    "transactionIndex": 0,
    "gasUsed": "448166",
    "logsBloom": "0x
    "blockHash": "0xfb3ac1b25aa0603a88bfed1d70401e5b87ff802163a372f543c40b08c456b930",
    "transactionHash": "0x85bfa4ea0bd16f1e3a9e202a3203674edd0c2085c4226aa814aadea1b1d26c53",
    "logs": [],
    "blockNumber": 5,
    "cumulativeGasUsed": "448166",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "30"
  ],
  "numDeployments": 1,
  "solcInputHash": "2d3394de6828529bec905aeae27abd50",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"updateInterval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"counter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"updateInterval\":\"- Period of time between two counter increments expressed as UNIX timestamp value\"}}},\"title\":\"The Counter contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"checkUpkeep(bytes)\":{\"notice\":\"Checks if the contract requires work to be done\"},\"constructor\":{\"notice\":\"Executes once when a contract is created to initialize state variables\"},\"counter()\":{\"notice\":\"Public counter variable\"},\"interval()\":{\"notice\":\"Use an interval in seconds and a timestamp to slow execution of Upkeep\"},\"performUpkeep(bytes)\":{\"notice\":\"Performs the work on the contract, if instructed by :checkUpkeep():\"}},\"notice\":\"A keeper-compatible contract that increments counter variable at fixed time intervals\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/KeepersCounter.sol\":\"KeepersCounter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface KeeperCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0xb6577cda6b731b655aebcb6e3c24f8658d3f4c5eda07200622d07d4570af33ea\",\"license\":\"MIT\"},\"contracts/KeepersCounter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\\\";\\n\\n/**\\n * @title The Counter contract\\n * @notice  A keeper-compatible contract that increments counter variable at fixed time intervals\\n */\\ncontract KeepersCounter is KeeperCompatibleInterface {\\n  /**\\n   * Public counter variable\\n   */\\n  uint256 public counter;\\n\\n  /**\\n   * Use an interval in seconds and a timestamp to slow execution of Upkeep\\n   */\\n  uint256 public immutable interval;\\n  uint256 public lastTimeStamp;\\n\\n  /**\\n   * @notice Executes once when a contract is created to initialize state variables\\n   *\\n   * @param updateInterval - Period of time between two counter increments expressed as UNIX timestamp value\\n   */\\n  constructor(uint256 updateInterval) {\\n    interval = updateInterval;\\n    lastTimeStamp = block.timestamp;\\n\\n    counter = 0;\\n  }\\n\\n  /**\\n   * @notice Checks if the contract requires work to be done\\n   */\\n  function checkUpkeep(\\n    bytes memory /* checkData */\\n  )\\n    public\\n    override\\n    returns (\\n      bool upkeepNeeded,\\n      bytes memory /* performData */\\n    )\\n  {\\n    upkeepNeeded = (block.timestamp - lastTimeStamp) > interval;\\n    // We don't use the checkData in this example. The checkData is defined when the Upkeep was registered.\\n  }\\n\\n  /**\\n   * @notice Performs the work on the contract, if instructed by :checkUpkeep():\\n   */\\n  function performUpkeep(\\n    bytes calldata /* performData */\\n  ) external override {\\n    // add some verification\\n    (bool upkeepNeeded, ) = checkUpkeep(\\\"\\\");\\n    require(upkeepNeeded, \\\"Time interval not met\\\");\\n\\n    lastTimeStamp = block.timestamp;\\n    counter = counter + 1;\\n    // We don't use the performData in this example. The performData is generated by the Keeper's call to your checkUpkeep function\\n  }\\n}\\n\",\"keccak256\":\"0xa5c8da6cdd8371df8e395bd9f0a375b244b8d0908926038d72f4aa98a60ce745\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b5060405161078738038061078783398181016040528101906100329190610063565b80608081815250504260018190555060008081905550506100b6565b60008151905061005d8161009f565b92915050565b6000602082840312156100795761007861009a565b5b60006100878482850161004e565b91505092915050565b6000819050919050565b600080fd5b6100a881610090565b81146100b357600080fd5b50565b6080516106af6100d86000396000818161019301526101ca01526106af6000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80633f3b3b271461005c5780634585e33b1461007a57806361bc221a146100965780636e04ff0d146100b4578063947a36fb146100e5575b600080fd5b610064610103565b6040516100719190610412565b60405180910390f35b610094600480360381019061008f91906102b2565b610109565b005b61009e610187565b6040516100ab9190610412565b60405180910390f35b6100ce60048036038101906100c991906102ff565b61018d565b6040516100dc9291906103c2565b60405180910390f35b6100ed6101c8565b6040516100fa9190610412565b60405180910390f35b60015481565b60006101236040518060200160405280600081525061018d565b50905080610166576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161015d906103f2565b60405180910390fd5b42600181905550600160005461017c91906104b0565b600081905550505050565b60005481565b600060607f0000000000000000000000000000000000000000000000000000000000000000600154426101c09190610506565b119150915091565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006101ff6101fa84610452565b61042d565b90508281526020810184848401111561021b5761021a610630565b5b610226848285610550565b509392505050565b60008083601f84011261024457610243610626565b5b8235905067ffffffffffffffff81111561026157610260610621565b5b60208301915083600182028301111561027d5761027c61062b565b5b9250929050565b600082601f83011261029957610298610626565b5b81356102a98482602086016101ec565b91505092915050565b600080602083850312156102c9576102c861063a565b5b600083013567ffffffffffffffff8111156102e7576102e6610635565b5b6102f38582860161022e565b92509250509250929050565b6000602082840312156103155761031461063a565b5b600082013567ffffffffffffffff81111561033357610332610635565b5b61033f84828501610284565b91505092915050565b6103518161053a565b82525050565b600061036282610483565b61036c818561048e565b935061037c81856020860161055f565b6103858161063f565b840191505092915050565b600061039d60158361049f565b91506103a882610650565b602082019050919050565b6103bc81610546565b82525050565b60006040820190506103d76000830185610348565b81810360208301526103e98184610357565b90509392505050565b6000602082019050818103600083015261040b81610390565b9050919050565b600060208201905061042760008301846103b3565b92915050565b6000610437610448565b90506104438282610592565b919050565b6000604051905090565b600067ffffffffffffffff82111561046d5761046c6105f2565b5b6104768261063f565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b60006104bb82610546565b91506104c683610546565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156104fb576104fa6105c3565b5b828201905092915050565b600061051182610546565b915061051c83610546565b92508282101561052f5761052e6105c3565b5b828203905092915050565b60008115159050919050565b6000819050919050565b82818337600083830152505050565b60005b8381101561057d578082015181840152602081019050610562565b8381111561058c576000848401525b50505050565b61059b8261063f565b810181811067ffffffffffffffff821117156105ba576105b96105f2565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f54696d6520696e74657276616c206e6f74206d6574000000000000000000000060008201525056fea26469706673582212205e904eb3633d44704cf4e6dfd74600718d7ce9e929622e957c5638896ad34b1e64736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c80633f3b3b271461005c5780634585e33b1461007a57806361bc221a146100965780636e04ff0d146100b4578063947a36fb146100e5575b600080fd5b610064610103565b6040516100719190610412565b60405180910390f35b610094600480360381019061008f91906102b2565b610109565b005b61009e610187565b6040516100ab9190610412565b60405180910390f35b6100ce60048036038101906100c991906102ff565b61018d565b6040516100dc9291906103c2565b60405180910390f35b6100ed6101c8565b6040516100fa9190610412565b60405180910390f35b60015481565b60006101236040518060200160405280600081525061018d565b50905080610166576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161015d906103f2565b60405180910390fd5b42600181905550600160005461017c91906104b0565b600081905550505050565b60005481565b600060607f0000000000000000000000000000000000000000000000000000000000000000600154426101c09190610506565b119150915091565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006101ff6101fa84610452565b61042d565b90508281526020810184848401111561021b5761021a610630565b5b610226848285610550565b509392505050565b60008083601f84011261024457610243610626565b5b8235905067ffffffffffffffff81111561026157610260610621565b5b60208301915083600182028301111561027d5761027c61062b565b5b9250929050565b600082601f83011261029957610298610626565b5b81356102a98482602086016101ec565b91505092915050565b600080602083850312156102c9576102c861063a565b5b600083013567ffffffffffffffff8111156102e7576102e6610635565b5b6102f38582860161022e565b92509250509250929050565b6000602082840312156103155761031461063a565b5b600082013567ffffffffffffffff81111561033357610332610635565b5b61033f84828501610284565b91505092915050565b6103518161053a565b82525050565b600061036282610483565b61036c818561048e565b935061037c81856020860161055f565b6103858161063f565b840191505092915050565b600061039d60158361049f565b91506103a882610650565b602082019050919050565b6103bc81610546565b82525050565b60006040820190506103d76000830185610348565b81810360208301526103e98184610357565b90509392505050565b6000602082019050818103600083015261040b81610390565b9050919050565b600060208201905061042760008301846103b3565b92915050565b6000610437610448565b90506104438282610592565b919050565b6000604051905090565b600067ffffffffffffffff82111561046d5761046c6105f2565b5b6104768261063f565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b60006104bb82610546565b91506104c683610546565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156104fb576104fa6105c3565b5b828201905092915050565b600061051182610546565b915061051c83610546565b92508282101561052f5761052e6105c3565b5b828203905092915050565b60008115159050919050565b6000819050919050565b82818337600083830152505050565b60005b8381101561057d578082015181840152602081019050610562565b8381111561058c576000848401525b50505050565b61059b8261063f565b810181811067ffffffffffffffff821117156105ba576105b96105f2565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f54696d6520696e74657276616c206e6f74206d6574000000000000000000000060008201525056fea26469706673582212205e904eb3633d44704cf4e6dfd74600718d7ce9e929622e957c5638896ad34b1e64736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "updateInterval": "- Period of time between two counter increments expressed as UNIX timestamp value"
        }
      }
    },
    "title": "The Counter contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "checkUpkeep(bytes)": {
        "notice": "Checks if the contract requires work to be done"
      },
      "constructor": {
        "notice": "Executes once when a contract is created to initialize state variables"
      },
      "counter()": {
        "notice": "Public counter variable"
      },
      "interval()": {
        "notice": "Use an interval in seconds and a timestamp to slow execution of Upkeep"
      },
      "performUpkeep(bytes)": {
        "notice": "Performs the work on the contract, if instructed by :checkUpkeep():"
      }
    },
    "notice": "A keeper-compatible contract that increments counter variable at fixed time intervals",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4011,
        "contract": "contracts/KeepersCounter.sol:KeepersCounter",
        "label": "counter",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 4016,
        "contract": "contracts/KeepersCounter.sol:KeepersCounter",
        "label": "lastTimeStamp",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}